pipeline {
    agent any

    tools {
        maven 'MavenDefault'
        jdk 'JDKDefault'
    }

    environment {
        SPRING_PROFILES_ACTIVE = 'dev'
    }

     stages {
            stage('Java Version') {
                steps {
                    bat 'java -version'
                }
            }

            stage('Start Containers') {
                        steps {
                            bat '''
                            docker ps -a -q -f name=postgres-sql-bn | findstr . >nul && docker start postgres-sql-bn || docker-compose up -d postgres
                            docker ps -a -q -f name=elasticsearch-bn | findstr . >nul && docker start elasticsearch-bn || docker-compose up -d elasticsearch
                            docker ps -a -q -f name=keycloak-bsn | findstr . >nul && docker start keycloak-bsn || docker-compose up -d keycloak '''
                            bat '''
                            echo === Checking if Elasticsearch is up and running ===
                            curl --retry 10 --retry-delay 5 -s -f http://localhost:9200/_cluster/health || exit 1
                            echo === Elasticsearch is ready ===
                            '''
                        }
                    }

            stage('Build') {
                steps {
                    dir('book-network') {
                        bat 'mvn clean package -DskipTests'
                    }
                }
            }

            stage('Test') {
                steps {
                    dir('book-network') {
                        bat 'mvn test -Dspring.datasource.url=jdbc:postgresql://localhost:5432/book_network_db'
                    }
                }
            }

            stage('Build Docker Image') {
                        steps {
                            dir('docker/backend') {
                                bat 'docker build -t bsn-api:1.0.0 .'
                            }
                        }
            }

            stage('Archive JAR') {
                steps {
                    dir('book-network') {
                        archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                    }
                }
            }
     }
}
